import { NextResponse } from 'next/server';
import { API_CONFIG } from '@/lib/config';

export async function POST(request) {
  try {
    const body = await request.json();

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ InHarmony API
    const response = await fetch(`${API_CONFIG.BASE_URL}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
      },
      credentials: 'include', // –≤–∞–∂–ª–∏–≤–æ –¥–ª—è cookie
      body: JSON.stringify(body),
    });

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Content-Type –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON
    const contentType = response.headers.get('content-type');
    console.log('üîê API login: Content-Type:', contentType);
    console.log('üîê API login: Response status:', response.status);

    if (!contentType || !contentType.includes('application/json')) {
      console.error('‚ùå API login: –∑–æ–≤–Ω—ñ—à–Ω—ñ–π API –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON:', contentType);
      // –¢–∏–º—á–∞—Å–æ–≤–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥—É
      return NextResponse.json(
        { error: 'External API returned non-JSON response', status: response.status },
        { status: 500 }
      );
    }

    const data = await response.json();

    if (response.ok) {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      if (data.data) {
        console.log('‚úÖ API login: –æ—Ç—Ä–∏–º–∞–ª–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', data.data);
      } else {
        console.log('‚ö†Ô∏è API login: –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ');
      }

      return NextResponse.json(data, {
        status: response.status,
      });
    } else {
      console.error('‚ùå API login: –ø–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:', data);
      return NextResponse.json(
        { error: 'Authentication failed', details: data },
        { status: response.status }
      );
    }
  } catch (error) {
    console.error('‚ùå API login: –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞:', error);
    return NextResponse.json(
      { error: 'Internal server error', message: error.message },
      { status: 500 }
    );
  }
}
