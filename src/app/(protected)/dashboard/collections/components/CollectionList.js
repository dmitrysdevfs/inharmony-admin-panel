'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { fetchCollections, deleteCollection } from '@/services/collectionsService';
import Table from '@/components/ui/Table';
import Button from '@/components/ui/Button';
import { formatDate, formatMoney, cn } from '@/lib/utils';
import styles from './CollectionList.module.css';
import { PencilIcon, TrashIcon } from '@heroicons/react/outline';
import { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/outline'; // –Ü–∫–æ–Ω–∫–∏ –¥–ª—è —Å—Ç—Ä—ñ–ª–æ—á–æ–∫

const CollectionList = ({ locale = 'ua' }) => {
  const router = useRouter();

  // üîß –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ä–æ—É—Ç—É –∫–æ–ª–µ–∫—Ü—ñ–π
  const BASE_ROUTE = '/dashboard/collections';

  const [allCollections, setAllCollections] = useState([]); // –í—Å—ñ –∑–±–æ—Ä–∏
  const [loading, setLoading] = useState(true);
  const [fallback, setFallback] = useState(false);
  const [fallbackReason, setFallbackReason] = useState('');
  const [pagination, setPagination] = useState({
    page: 1,
    limit: 6,
    total: 0,
  });
  const [sortConfig, setSortConfig] = useState({
    key: 'createdAt',
    direction: 'desc', // –ü–æ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—é - –Ω–æ–≤—ñ—à—ñ –∑–±–æ—Ä–∏ —Å–ø–æ—á–∞—Ç–∫—É
  });

  const loadCollections = useCallback(async () => {
    try {
      setLoading(true);
      setFallback(false);
      setFallbackReason('');

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –∑–±–æ—Ä–∏ (perPage=50)
      const response = await fetchCollections(locale, 1, 50);

      setAllCollections(response.data || []);
      setFallback(response.fallback || false);
      setFallbackReason(response.reason || '');
      setPagination(prev => ({
        ...prev,
        total: response.total || 0,
      }));
    } catch (error) {
      setFallback(true);
      setFallbackReason('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
    } finally {
      setLoading(false);
    }
  }, [locale]);

  useEffect(() => {
    loadCollections();
  }, [loadCollections]);

  const handleDelete = async id => {
    if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∑–±—ñ—Ä? –¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏.')) {
      try {
        await deleteCollection(locale, id);
        loadCollections();
        alert('–ó–±—ñ—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ');
      } catch (error) {
        console.error('Error deleting collection:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–±–æ—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
      }
    }
  };

  const handleSort = key => {
    setSortConfig(prevConfig => ({
      key,
      direction: prevConfig.key === key && prevConfig.direction === 'asc' ? 'desc' : 'asc',
    }));
    // –°–∫–∏–¥–∞—î–º–æ –Ω–∞ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    setPagination(prev => ({ ...prev, page: 1 }));
  };

  const sortCollections = collections => {
    if (!sortConfig.key) return collections;

    return [...collections].sort((a, b) => {
      let aValue = a[sortConfig.key];
      let bValue = b[sortConfig.key];

      // –î–ª—è –¥–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ Date –æ–±'—î–∫—Ç–∏
      if (sortConfig.key === 'createdAt') {
        aValue = new Date(aValue);
        bValue = new Date(bValue);
      }

      if (aValue < bValue) {
        return sortConfig.direction === 'asc' ? -1 : 1;
      }
      if (aValue > bValue) {
        return sortConfig.direction === 'asc' ? 1 : -1;
      }
      return 0;
    });
  };

  // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
  const getCurrentPageCollections = () => {
    const sortedCollections = sortCollections(allCollections);
    const startIndex = (pagination.page - 1) * pagination.limit;
    const endIndex = startIndex + pagination.limit;
    return sortedCollections.slice(startIndex, endIndex);
  };

  const columns = [
    {
      key: 'title',
      label: '–ù–∞–∑–≤–∞ —ñ –¥–∞—Ç–∞ –∑–±–æ—Ä—É',
      sortable: true,
      sortKey: 'createdAt', // –°–æ—Ä—Ç—É—î–º–æ –ø–æ –¥–∞—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
      render: (value, row) => {
        const truncatedTitle = value && value.length > 30 ? `${value.substring(0, 30)}...` : value;
        const formattedDate = formatDate(row.createdAt, 'dd-MM.yyyy');

        return (
          <div className={styles.titleCell} onClick={() => router.push(`${BASE_ROUTE}/${row.id}`)}>
            <div className={styles.titleRow}>
              <strong>{truncatedTitle}</strong>
            </div>
            <div className={styles.dateRow}>{formattedDate}</div>
          </div>
        );
      },
    },
    {
      key: 'status',
      label: '–°—Ç–∞—Ç—É—Å',
      render: value => (
        <span className={cn(styles.status, styles[value])}>
          {value === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–π'}
        </span>
      ),
    },
    {
      key: 'progress',
      label: '–ó–∞–ø–æ–≤–Ω–µ–Ω–æ',
      render: (_, row) => {
        const percentage = row.target > 0 ? Math.round((row.raised / row.target) * 100) : 0;
        return (
          <div className={styles.progressCell}>
            <span className={styles.percentage}>{percentage}%</span>
          </div>
        );
      },
    },
    {
      key: 'raised',
      label: '–ó—ñ–±—Ä–∞–Ω–æ',
      render: value => formatMoney(value),
    },
    {
      key: 'goal',
      label: '–¶—ñ–ª—å',
      render: value => formatMoney(value),
    },
    {
      key: 'peopleDonate',
      label: '–î–æ–Ω–æ—Ä–∏',
      render: value => value || 0,
    },
    {
      key: 'actions',
      label: '–î—ñ—ó',
      render: (_, row) => (
        <div className={styles.actions}>
          <Button
            size="small"
            variant="secondary"
            onClick={() => router.push(`${BASE_ROUTE}/edit/${row.id}`)}
            className={styles.iconButton}
          >
            <PencilIcon className={styles.icon} />
          </Button>

          <Button
            size="small"
            variant="danger"
            onClick={() => handleDelete(row.id)}
            className={styles.iconButton}
          >
            <TrashIcon className={styles.icon} />
          </Button>
        </div>
      ),
    },
  ];

  const totalPages = Math.ceil(allCollections.length / pagination.limit);

  if (loading) {
    return <div className={styles.loading}>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>;
  }

  return (
    <div>
      <div className={styles.container}>
        <div className={styles.header}>
          <h2>–ó–±–æ—Ä–∏ –∫–æ—à—Ç—ñ–≤</h2>
          <button className={styles.creationBtn} onClick={() => router.push(`${BASE_ROUTE}/new`)}>
            –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–±—ñ—Ä
          </button>
        </div>

        {fallback && (
          <div className={styles.fallbackWarning}>
            –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
            {fallbackReason && <span className={styles.fallbackReason}> ({fallbackReason})</span>}
          </div>
        )}

        <Table
          columns={columns}
          data={getCurrentPageCollections()}
          onRowClick={row => router.push(`${BASE_ROUTE}/${row.id}`)}
          onSort={handleSort}
          sortConfig={sortConfig}
        />

        {allCollections.length === 0 && !loading && (
          <div className={styles.emptyState}>–ù–µ–º–∞—î –∑–±–æ—Ä—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è</div>
        )}
      </div>
      {totalPages > 1 && (
        <div className={styles.pagination}>
          <button
            className={cn(styles.paginationButton, { [styles.disabled]: pagination.page === 1 })}
            disabled={pagination.page === 1}
            onClick={() => setPagination(prev => ({ ...prev, page: prev.page - 1 }))}
          >
            <ChevronLeftIcon className={styles.iconArrow} />
          </button>

          <div className={styles.pageDots}>
            {Array.from({ length: totalPages }, (_, index) => (
              <button
                key={index}
                className={cn(styles.pageDot, {
                  [styles.active]: pagination.page === index + 1,
                })}
                onClick={() => setPagination(prev => ({ ...prev, page: index + 1 }))}
              ></button>
            ))}
          </div>

          <button
            className={cn(styles.paginationButton, {
              [styles.disabled]: pagination.page === totalPages,
            })}
            disabled={pagination.page === totalPages}
            onClick={() => setPagination(prev => ({ ...prev, page: prev.page + 1 }))}
          >
            <ChevronRightIcon className={styles.iconArrow} />
          </button>
        </div>
      )}
    </div>
  );
};

export default CollectionList;
