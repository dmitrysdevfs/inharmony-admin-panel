'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { fetchCollections } from '../../services/collectionsService'; // üîÑ –û–ù–û–í–õ–ï–ù–ò–ô –Ü–ú–ü–û–†–¢
import Table from '../ui/Table';
import Button from '../ui/Button';
import { formatDate, formatMoney, cn } from '../../lib/utils';
import styles from './CollectionList.module.css';

const CollectionList = ({ locale = 'ua' }) => {
  const router = useRouter();
  const [collections, setCollections] = useState([]);
  const [loading, setLoading] = useState(true);
  const [fallback, setFallback] = useState(false);
  const [fallbackReason, setFallbackReason] = useState('');
  const [pagination, setPagination] = useState({
    page: 1,
    limit: 6,
    total: 0,
  });

  useEffect(() => {
    loadCollections();
  }, [locale, pagination.page]);

  const loadCollections = async () => {
    try {
      setLoading(true);
      setFallback(false);
      setFallbackReason('');

      const response = await fetchCollections(locale, pagination.page, pagination.limit); // üîÑ –ù–û–í–ò–ô –í–ò–ö–õ–ò–ö

      setCollections(response.data || []);
      setFallback(response.fallback || false);
      setFallbackReason(response.reason || '');
      setPagination(prev => ({
        ...prev,
        total: response.total || 0,
      }));
    } catch (error) {
      setFallback(true);
      setFallbackReason('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
    } finally {
      setLoading(false);
    }
  };

  const columns = [
    {
      key: 'title',
      label: '–ù–∞–∑–≤–∞',
      render: (value, row) => (
        <div className={styles.titleCell}>
          <strong>{value}</strong>
          <span className={styles.description}>{row.description}</span>
        </div>
      ),
    },
    {
      key: 'goal',
      label: '–¶—ñ–ª—å',
      render: value => formatMoney(value),
    },
    {
      key: 'raised',
      label: '–ó—ñ–±—Ä–∞–Ω–æ',
      render: value => formatMoney(value),
    },
    {
      key: 'status',
      label: '–°—Ç–∞—Ç—É—Å',
      render: value => (
        <span className={cn(styles.status, styles[value])}>
          {value === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'}
        </span>
      ),
    },
    {
      key: 'createdAt',
      label: '–°—Ç–≤–æ—Ä–µ–Ω–æ',
      render: value => formatDate(value),
    },
    {
      key: 'actions',
      label: '–î—ñ—ó',
      render: (_, row) => (
        <div className={styles.actions}>
          <Button
            size="small"
            variant="outline"
            onClick={() => router.push(`/collections/${row.id}`)}
          >
            –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏
          </Button>
          <Button
            size="small"
            variant="secondary"
            onClick={() => router.push(`/collections/edit/${row.id}`)}
          >
            –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
          </Button>
        </div>
      ),
    },
  ];

  const totalPages = Math.ceil(pagination.total / pagination.limit);

  if (loading) {
    return <div className={styles.loading}>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>;
  }

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h2>–ó–±–æ—Ä–∏ –∫–æ—à—Ç—ñ–≤</h2>
        <Button variant="primary" onClick={() => router.push('/collections/new')}>
          –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–±—ñ—Ä
        </Button>
      </div>

      {fallback && (
        <div className={styles.fallbackWarning}>
          ‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
          {fallbackReason && <span className={styles.fallbackReason}> ({fallbackReason})</span>}
        </div>
      )}

      <Table
        columns={columns}
        data={collections}
        onRowClick={row => console.log('Row clicked:', row)}
      />

      {collections.length === 0 && !loading && (
        <div className={styles.emptyState}>–ù–µ–º–∞—î –∑–±–æ—Ä—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è</div>
      )}

      {totalPages > 1 && (
        <div className={styles.pagination}>
          <Button
            variant="outline"
            disabled={pagination.page === 1}
            onClick={() => setPagination(prev => ({ ...prev, page: prev.page - 1 }))}
          >
            –ü–æ–ø–µ—Ä–µ–¥–Ω—è
          </Button>

          <span className={styles.pageInfo}>
            –°—Ç–æ—Ä—ñ–Ω–∫–∞ {pagination.page} –∑ {totalPages}
          </span>

          <Button
            variant="outline"
            disabled={pagination.page === totalPages}
            onClick={() => setPagination(prev => ({ ...prev, page: prev.page + 1 }))}
          >
            –ù–∞—Å—Ç—É–ø–Ω–∞
          </Button>
        </div>
      )}
    </div>
  );
};

export default CollectionList;
